计算机图形学主要包含四大部分的内容：建模(Modeling)、渲染(Rendering)、动画(Animation)和人机交互(Human–computer Interaction, HCI)。
https://blog.csdn.net/TxyITxs/article/details/125416757
计算机图形学里面用到的数学比较多，列举一些常用的，包括：离散数学、微积分、线性代数、矩阵计算、微分几何、抽样法理论和信号处理、矩阵方程组、数值计算和分析、计算方法、偏微分方程、微分方程数值解、最优化、概率、统计、计算几何、wu'li等。
1. 3D建模
2. 计算机图形学
3. 计算机动画
4. 基于物理的渲染
5. 基于物理的动画
6. 机器感知
7. 计算机视觉
8. 计算学习
6、再深入就是了解详细的管线处理流程、shader语言开发等。

学会了基本的图形绘制，然后就是绘图和动画，先尝试加载jpg，理解rgb的数据组织，再加载png，理解rgba的数据组织，但apha存在镂空和多级两种情况，分别对应各种压缩格式，在这个过程中学习dxt1-dxt5，pvr，tga的各种格式意义。学会自己写一个序列镇动画格式，理解帧信息和换图片动画处理，在这里要理解锚点的意义（动画对齐），理解合并图片和裁剪，旋转拼合算法的意义（减少显存占用）。

好，现在开始写一个简单的节点系统，基于节点系统开发一个界面库（包括基本的窗口以及常用的控件），在这个过程中，理解节点系统，事件绑定，输入法处理，字图bmpfont的意义。自己写一个树形结构的界面存储文件，也练习转换成用json或xml，还有二进制。
写一个简单的粒子系统，实现一些天气和爆炸。在场景中摆放。
然后就是学一下tiledMap，先做一个单屏推箱子，然后做一个横向和纵向滚屏打飞机，再然后就是超级玛丽，最后斜视角的仿传奇。这个过程中理解格子地图的原理，滚屏，寻路算法还有地图编辑器的制作
学一下骨骼动画，理解部件换装和绑定点的意义，可以尝试学习一下spine。实在没法开发骨骼动画库和工具，起码理解原理。不要求自己开发。
开始学习shader，但这只能在高速图形api上做，系统的学习一下shader的基础，实现纹理动画，变色动画，还有一些2D的ps效果。
写一下简单的物理碰撞，支持一些跳跃，反弹的实现，做一些小游戏。
用opengl实现3D的点线面绘图。
加载一个obj，理解模型格式，尝试写一个3dsmax导出插件，并写入到自己的格式，加载去渲染出来。
研究一下3D顶点差值帧动画，然后是骨骼动画，这块可以尝试加载一个动画FBX。然后是子模型换装换色，使用遮罩贴图对皮肤局部换色，换材质。然后动画上下半身的动作混合，多个动作间的融合。
3D的地形，网格地图的拼合，LOD，多纹理混合，局部镂空，写一个室外场景地形编辑器…能用画刷对地形进行编辑，能摆放场景模型。
研究下光照和影子，几种典型的光照模型，影子的话先是给模型地面位置做一做投影或者圆形面片，然后升级到动态shadowmap，再尝试使用多级，体积阴影了解即可。实现一下场景阴影烘焙。
学一下雾效的使用，对雾里小模型做裁剪，大模型做lod。使用shader来实现一下雾，高度雾
粒子系统实现雨雪天气，烟雾，火，跟模型组合成特效模型，比如火把，灯台。尝试加入时间帧控制，加入条带，面片，模型，例子组合。实现一些组合效果，再开发一个特效编辑器。
开发水面，理解水面对场景反射与折射，尝试法线纹理实现波光粼粼。
加强一下后处理特效，如景深，SSAO，提升一点画面质量。
正在用纯C写一个游戏引擎使用openGL做绘制的，大概有2年了从零开始写得。基本完成了80%左右了，实现了如下功能：1. 在c标准库之上封装了一个基础库，包括动态数组，哈希映射，二进制数据解析，JSON解析器，文件读写。定义了一套OOC的style，一些通用设计模式的封装，一个数学库包括向量和矩阵相关的计算。2. 利用openGL封装了一个绘制层。包括绘制树结构，精灵绘制和批量绘制，纹理管理，摄像机管理，openGL工具类封装，着色器的管理，Tween算法实现和封装，图片数据的解析等。3. 程序层的封装。包括窗口的管理，层结构与绘制层组装，事件处理，定时器管理，状态机行为树等。4. 物理引擎。完成了不同形状的定义和碰撞检测，碰撞事件回调。碰撞后的物理运动还没实现。5. 应用扩展层。实现了一个粒子系统，纹理集合系统，地图系统和一个骨骼动画。基本上实现一个2D游戏是没有问题了，未来会加入3D的扩展支持。物理引擎我会继续做成一个完整的2D系统，以后会是3D的。打算自己实现一个像lua那种尺寸的脚本嵌入。对了，还有就是实现一个ui系统。目前正在边完善引擎边利用这个引擎制作游戏。


作者：红孩儿工作室
链接：https://www.zhihu.com/question/24616737/answer/2274334079
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

一般来说，最先还是画画点，线，面。在我看来，一生二，二生三，三生万物，点，线，面虽简单，但是基础中的基础，是复杂模型的本质。通过点、线、面尝试结合结点系统做个小框架，能update，能render，跑出一些基于时间帧的动画，进而理解精灵，层，场景的关系。      然后是纹理和材质的学习，掌握多纹理和ALPHA混合，比如法线、高光贴图+遮罩贴图的材质效果，基于这些做粒子特效，开始写一些简单的Shader.这里面还包括各类图片文件格式的研究，了解像素的压缩和显存占用评估，能够自由的写一些帧动画格式，并通过工具对各类图片的像素处理做手脚。比如写一个工具把目录下所有图片中的透明空白区做裁剪后重新保存。以及尝试着写一个粒子编辑器调整各个参数导出。      三角面有了纹理，也就可以来做一些复杂的模型表现了，之后就是研究模型动画，包括顶点动画和骨骼动画，动作混合和融合，多人同屏，骨骼动画的LOD，合批优化，那这一块就要深入研究一下常见的模型文件格式，能读取并显示。同时要自已去尝试着为3dsmax导出插件写模型动画导出文件格式，并读取渲染起来。      如果你能完成自已写3dsmax导出插件并渲染骨骼动画模型，你对3D模型数据的看法就不再流于表面了，这时候格式和模型数据的外在形式已经不太重要了，你可以开始写一个自已的模型观察器，查看子模型，材质，换装，绑定武器装备，动画效果，碰撞盒，动作混合和融合效果，关键帧编辑，这部分就花了我三年时间才弄明白。      好，模型这一关过了，现在开始做场景，学写大地表，地表需要了解的知识也比较多，网格区域优化、多纹理混合、模型摆放、区域镂空、高度图，阴影烘焙，因为大地表这块涉及到的顶点和三角面规模巨大，所以优化会成问题，即包括面数优化，也包括像素填充率优化，这部分是有一定难度的，需要了解顶点格式数据压缩，LOD，像素深度剔除，AO，ShadowMap和烘焙，还有导航网格生成，寻路算法，水体渲染，草体渲染，太阳光晕和辉光，天气系统，静物批次优化等等。这些技术需要通过开发场景编辑器来最终完成all in one的编辑工作。
